<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-07-04T11:47:33+00:00</updated><id>/feed.xml</id><title type="html">Vineeth’s Blog</title><subtitle>There are things that I learn every day. In this blog, I try to collect them here.</subtitle><entry><title type="html">A Case Against Default Scope</title><link href="/2022/07/04/a_case_against_default_scope.html" rel="alternate" type="text/html" title="A Case Against Default Scope" /><published>2022-07-04T11:44:14+00:00</published><updated>2022-07-04T11:44:14+00:00</updated><id>/2022/07/04/a_case_against_default_scope</id><content type="html" xml:base="/2022/07/04/a_case_against_default_scope.html">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default_scope&lt;/code&gt; bring some degrees of convenience, however, most of the DB queries are application logic. Applying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default_scope&lt;/code&gt; may payoff when filtering out soft deleted object, but most of cases are rarely justified. Even you could identifid the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt; clause from SQL log, the situation quickly becomes ugly and turns into a horror movie when joining multiple tables with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default_scope&lt;/code&gt;. Modifying those queries with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unscope&lt;/code&gt; is risky and query specs of such are likely to be not fully covered to provide the safety net.&lt;/p&gt;

&lt;p&gt;By my colleague Tony.&lt;/p&gt;</content><author><name></name></author><summary type="html">default_scope bring some degrees of convenience, however, most of the DB queries are application logic. Applying default_scope may payoff when filtering out soft deleted object, but most of cases are rarely justified. Even you could identifid the where clause from SQL log, the situation quickly becomes ugly and turns into a horror movie when joining multiple tables with default_scope. Modifying those queries with unscope is risky and query specs of such are likely to be not fully covered to provide the safety net.</summary></entry><entry><title type="html">A Case Against Exceptions</title><link href="/2022/07/04/a_case_against_exceptions.html" rel="alternate" type="text/html" title="A Case Against Exceptions" /><published>2022-07-04T11:44:14+00:00</published><updated>2022-07-04T11:44:14+00:00</updated><id>/2022/07/04/a_case_against_exceptions</id><content type="html" xml:base="/2022/07/04/a_case_against_exceptions.html">&lt;p&gt;I hate exceptions written in my application code.&lt;/p&gt;

&lt;p&gt;Exceptions are supposed to be for exceptional situations(IO failures, Endpoint errors, among many).&lt;/p&gt;

&lt;p&gt;What are exceptional situations? Situations which the application programmer can not anticipate.&lt;/p&gt;

&lt;p&gt;If there are/is a situation(s) that can be anticipated, then exceptions don’t really sit well there.&lt;/p&gt;</content><author><name></name></author><summary type="html">I hate exceptions written in my application code.</summary></entry><entry><title type="html">A Case Against Polymorphic Association</title><link href="/2022/07/04/a_case_against_polymorphic_association.html" rel="alternate" type="text/html" title="A Case Against Polymorphic Association" /><published>2022-07-04T11:44:14+00:00</published><updated>2022-07-04T11:44:14+00:00</updated><id>/2022/07/04/a_case_against_polymorphic_association</id><content type="html" xml:base="/2022/07/04/a_case_against_polymorphic_association.html">&lt;p&gt;Polymorphic association, or tagged association; Causes pain. How does it cause pain you ask?&lt;/p&gt;

&lt;p&gt;We won’t be able to have forigin key, this in turn causes data integrity problems.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;p&gt;We have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complaints&lt;/code&gt; that can be associated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service_providers&lt;/code&gt; OR &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;consumers&lt;/code&gt;,
we decided, we can go with polymorphic association here, calling it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complained_by&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, we eneded up deleting(rather soft deleting)  a consumer, with whom a complaint was associated.
We then tried to fetch the complaint data and associated users in a promise(GraphQL),
the promise started to fail when it was being resolved.&lt;/p&gt;

&lt;p&gt;After some head scratching, we figured out that the associated user was missing, 
but the complaint table was not updated with it.&lt;/p&gt;

&lt;p&gt;This makes me feel that even though polymorphic association is nice, I think having separate table, 
with good forigin keys would have solved this issue&lt;/p&gt;

&lt;p&gt;Further reading: https://stackoverflow.com/questions/922184&lt;/p&gt;</content><author><name></name></author><summary type="html">Polymorphic association, or tagged association; Causes pain. How does it cause pain you ask?</summary></entry><entry><title type="html">A Case Against Side Effects</title><link href="/2022/07/04/a_case_against_side_effects.html" rel="alternate" type="text/html" title="A Case Against Side Effects" /><published>2022-07-04T11:44:14+00:00</published><updated>2022-07-04T11:44:14+00:00</updated><id>/2022/07/04/a_case_against_side_effects</id><content type="html" xml:base="/2022/07/04/a_case_against_side_effects.html">&lt;p&gt;Too many a posts have been written where side effects were shown shade. Here is another from me to the many.&lt;/p&gt;

&lt;p&gt;Recently, I was travelling back from Bangalore to Berlin, I get this slack message from TL.
I was inserting records into the DB, but I was not triggering the relvant activerecord callbacks, 
as I was just doing a bulk insert in a single SQL statement.&lt;/p&gt;

&lt;p&gt;The side-effect that I hate is the activerecord callback. 
The thought that I have is, should the part of the application be written as a pull based model?
(where the other class/job figures out what all changed and runs some code based on that)&lt;/p&gt;

&lt;p&gt;If it is changed to a pull based model, how will the architecture change?&lt;/p&gt;</content><author><name></name></author><summary type="html">Too many a posts have been written where side effects were shown shade. Here is another from me to the many.</summary></entry><entry><title type="html">A Case For Email Graphql Scalar</title><link href="/2022/07/04/a_case_for_email_graphql_scalar.html" rel="alternate" type="text/html" title="A Case For Email Graphql Scalar" /><published>2022-07-04T11:44:14+00:00</published><updated>2022-07-04T11:44:14+00:00</updated><id>/2022/07/04/a_case_for_email_graphql_scalar</id><content type="html" xml:base="/2022/07/04/a_case_for_email_graphql_scalar.html">&lt;h3 id=&quot;a-case-for-email-scalar-in-graphql&quot;&gt;A case for email scalar in graphql.&lt;/h3&gt;

&lt;p&gt;Check out the docs here: https://graphql-ruby.org/type_definitions/scalars&lt;/p&gt;

&lt;p&gt;Does it make sense to add email as a graphql scalar? We have URL as a scalar, so why not email?&lt;/p&gt;

&lt;p&gt;One reason why I think we don’t need it is because, unlike DateTime, we don’t need to translate it to a “ruby” object.&lt;/p&gt;

&lt;p&gt;But then, we want to ensure the email follows a certain format.
This way, we can also indicate to the clients that the data that they are going to receive is going to be of a certain format(type). 
And I think they can build stuff more easily with this info; 
It also indicates to the clients that there will be a certain kind of input validation on the type side.&lt;/p&gt;</content><author><name></name></author><summary type="html">A case for email scalar in graphql.</summary></entry><entry><title type="html">A Case For Multiple Tables Against Polymorphic Associated Table</title><link href="/2022/07/04/a_case_for_multiple_tables_against_polymorphic_associated_table.html" rel="alternate" type="text/html" title="A Case For Multiple Tables Against Polymorphic Associated Table" /><published>2022-07-04T11:44:14+00:00</published><updated>2022-07-04T11:44:14+00:00</updated><id>/2022/07/04/a_case_for_multiple_tables_against_polymorphic_associated_table</id><content type="html" xml:base="/2022/07/04/a_case_for_multiple_tables_against_polymorphic_associated_table.html">&lt;p&gt;Imagine this, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comments&lt;/code&gt; AR object needs to be associated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service_provider&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;consumers&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unregistered_users&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The “Rails” way to do it is to go with something like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comments&lt;/code&gt; table, 
have a polymorphic association between the rest of the objects and be done with it.&lt;/p&gt;

&lt;p&gt;This doesn’t really provide us with the safety of having forigin keys. 
Still what would be another reason to split it up into multiple tables?&lt;/p&gt;

&lt;p&gt;It is, the fact that we fetch all the comment records scoped to a specific user when we get it, makes us sure to have it in
multiple tables.&lt;/p&gt;

&lt;p&gt;This way, we get the safety of having forigin keys from the DB.&lt;/p&gt;</content><author><name></name></author><summary type="html">Imagine this, comments AR object needs to be associated with service_provider, consumers and unregistered_users.</summary></entry><entry><title type="html">Activerecord Import</title><link href="/2022/07/04/activerecord_import.html" rel="alternate" type="text/html" title="Activerecord Import" /><published>2022-07-04T11:44:14+00:00</published><updated>2022-07-04T11:44:14+00:00</updated><id>/2022/07/04/activerecord_import</id><content type="html" xml:base="/2022/07/04/activerecord_import.html">&lt;h1 id=&quot;activerecord-import-is-a-very-useful-gem&quot;&gt;Activerecord import is a very useful gem.&lt;/h1&gt;

&lt;p&gt;The feature is already present in Rails 6 now.&lt;/p&gt;

&lt;p&gt;One of the APIs that I was using sent back close to half a million records(ofcourse it was paginated).&lt;/p&gt;

&lt;p&gt;I had to import this into our database with the upsert action. For this initially I did &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_or_create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So slow…..&lt;/p&gt;

&lt;p&gt;I was considering to build an SQL query using the JSON that arrived.&lt;/p&gt;

&lt;p&gt;Woe is me!&lt;/p&gt;

&lt;p&gt;This is not the way to import bulk data, told my co-worker.&lt;/p&gt;

&lt;p&gt;He pointed me to (activerecord_import)[https://github.com/zdennis/activerecord-import]&lt;/p&gt;

&lt;p&gt;BAM! 15 mins later, all all the data that was out there in the API is in my DB.&lt;/p&gt;

&lt;p&gt;Please feel free to raise an issue if you felt this post needs more information.&lt;/p&gt;

&lt;p&gt;Cheers&lt;/p&gt;

&lt;p&gt;Vineeth&lt;/p&gt;</content><author><name></name></author><summary type="html">Activerecord import is a very useful gem.</summary></entry><entry><title type="html">Another Blog Post</title><link href="/2022/07/04/another_blog_post.html" rel="alternate" type="text/html" title="Another Blog Post" /><published>2022-07-04T11:44:14+00:00</published><updated>2022-07-04T11:44:14+00:00</updated><id>/2022/07/04/another_blog_post</id><content type="html" xml:base="/2022/07/04/another_blog_post.html">&lt;h1 id=&quot;another-blog-post&quot;&gt;Another blog post!&lt;/h1&gt;

&lt;p&gt;Here is something that I’m writing to show how this entire things come together!&lt;/p&gt;</content><author><name></name></author><summary type="html">Another blog post!</summary></entry><entry><title type="html">Bookmarks</title><link href="/2022/07/04/bookmarks.html" rel="alternate" type="text/html" title="Bookmarks" /><published>2022-07-04T11:44:14+00:00</published><updated>2022-07-04T11:44:14+00:00</updated><id>/2022/07/04/bookmarks</id><content type="html" xml:base="/2022/07/04/bookmarks.html">&lt;h3 id=&quot;here-are-some-bookmarks-that-i-found-to-be-useful&quot;&gt;Here are some bookmarks that I found to be useful.&lt;/h3&gt;</content><author><name></name></author><summary type="html">Here are some bookmarks that I found to be useful.</summary></entry><entry><title type="html">Build Vs Buy</title><link href="/2022/07/04/build_vs_buy.html" rel="alternate" type="text/html" title="Build Vs Buy" /><published>2022-07-04T11:44:14+00:00</published><updated>2022-07-04T11:44:14+00:00</updated><id>/2022/07/04/build_vs_buy</id><content type="html" xml:base="/2022/07/04/build_vs_buy.html">&lt;h1 id=&quot;build-vs-buy&quot;&gt;Build V/S Buy&lt;/h1&gt;

&lt;p&gt;I was browsing HN and I came across this blogpost which was encouraging businesses to buy instead of build. I found this comment to be insightful.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;One thing to pay close attention to when making a build v.s. buy decision is the impact that billing models will have on your usage of a tool.
Take logging for example. If you buy a log aggregation platform like Splunk Cloud or Loggly the pricing is likely based on the quantity of data you ingest per day.&lt;/p&gt;

&lt;p&gt;This can set up a weird incentive. If you are already close to the limit of your plan, you’ll find that engineers are discouraged from logging new things.&lt;/p&gt;

&lt;p&gt;This can have a subtle effect on your culture. Engineers who don’t want to get into a budgeting conversation will end up avoiding using key tools, and this can cost you a lot of money in terms of invisible lost productivity.&lt;/p&gt;

&lt;p&gt;Tools that charge per-head have a similar problem: if your analytics tool charges per head, your junior engineers won’t have access to this. This means you won’t build a culture where engineers use analytics to help make decisions.&lt;/p&gt;

&lt;p&gt;This is a very tricky dynamic. On the one hand it’s clearly completely crazy to invest in building your own logging or analytics solutions - you should be spending engineering effort solving the problems that are unique to your company!&lt;/p&gt;

&lt;p&gt;But on the other hand, there are significant, hard-to-measure hidden costs of vendors with billing mechanisms that affect your culture in negative ways.&lt;/p&gt;

&lt;p&gt;I don’t have a solution to this. It’s just something I’ve encountered that makes the “build v.s. buy” decision a lot more subtle than it can first appear&lt;/p&gt;</content><author><name></name></author><summary type="html">Build V/S Buy</summary></entry></feed>